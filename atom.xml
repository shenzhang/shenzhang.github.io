<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Keep going]]></title>
  <link href="http://shenzhang.github.io/atom.xml" rel="self"/>
  <link href="http://shenzhang.github.io/"/>
  <updated>2014-04-08T20:50:58+08:00</updated>
  <id>http://shenzhang.github.io/</id>
  <author>
    <name><![CDATA[zshen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Jetty中的ScopedHandler]]></title>
    <link href="http://shenzhang.github.io/blog/2013/07/26/scopehandler-in-jetty/"/>
    <updated>2013-07-26T03:27:00+08:00</updated>
    <id>http://shenzhang.github.io/blog/2013/07/26/scopehandler-in-jetty</id>
    <content type="html"><![CDATA[<p>jetty中的<code>org.eclipse.jetty.server.handler.ScopedHandler</code>主要用于ServletContextHandler以及WebAppContext，粗略看了下有点糊里糊涂的，后面仔细看了之后觉得实际上他就是想实现一个具有以下执行流程的HandlerWrapper:</p>

<pre><code> A.handle(...)
   A.doScope(...)
     B.doScope(...)
       C.doScope(...)
         A.doHandle(...)
           B.doHandle(...)
              C.doHandle(...)  
</code></pre>

<p>其中A包含B，B包含C。该执行流程主要应用在WebAppContext中。WebAppContext包含了SessionHandler,SecurityHandler, ServletHandler，但是从request的流程来看实际上是WebAppContext->SessionHandler->SecurityHandler->ServletHandler，所有后续执行逻辑都是被包含在前面的handler逻辑中的，或者所起堆栈是嵌套的。这样最大的好处是环境（context）共享和异常处理。内部的逻辑必须是在外部逻辑创造的环境内执行，比如所ServletHandler必须是在SessionHandler初始化好的session环境中处理。</p>

<p>因此ScopedHandler需要两个过程：</p>

<p><em>doScope:</em> 进入环境，并做响应的环境初始化,并在其中调用子handler的doScope，最后再做退出环境的逻辑。</p>

<p><em>doHandler:</em> 执行该handler真正要处理的事情，并在其中调用子handler的doScope</p>

<p>拿SessionHandler举例，它的doScope就是将session恢复好，并且再调用子handler的doScope进一步对SecurityHandler做环境初始化；它的doHandler实际上就没有做任何事情，仅仅是调用子handler的doHandler：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">never</span><span class="o">())</span>
</span><span class='line'>        <span class="n">nextHandle</span><span class="o">(</span><span class="n">target</span><span class="o">,</span><span class="n">baseRequest</span><span class="o">,</span><span class="n">request</span><span class="o">,</span><span class="n">response</span><span class="o">);</span>
</span><span class='line'>    <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">_nextScope</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">_nextScope</span> <span class="o">==</span> <span class="n">_handler</span><span class="o">)</span>
</span><span class='line'>        <span class="n">_nextScope</span><span class="o">.</span><span class="na">doHandle</span><span class="o">(</span><span class="n">target</span><span class="o">,</span><span class="n">baseRequest</span><span class="o">,</span><span class="n">request</span><span class="o">,</span><span class="n">response</span><span class="o">);</span>
</span><span class='line'>    <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">_handler</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>        <span class="n">_handler</span><span class="o">.</span><span class="na">handle</span><span class="o">(</span><span class="n">target</span><span class="o">,</span><span class="n">baseRequest</span><span class="o">,</span><span class="n">request</span><span class="o">,</span><span class="n">response</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>doScope的递归调用还算比较简单，但是如何从最底层的handler.doScope回到最上层的handler.doHandler呢，而且是嵌套的调用？</p>

<p>ScopedHandler实际上维护了两个变量：</p>

<p><em>_nextScope:</em> 指向下一个子handler</p>

<p><em>_outterScope</em> 指向最外层的handler</p>

<p>初始化：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doStart</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="n">_outerScope</span><span class="o">=</span><span class="n">__outerScope</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">_outerScope</span><span class="o">==</span><span class="kc">null</span><span class="o">)</span>
</span><span class='line'>                <span class="n">__outerScope</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="kd">super</span><span class="o">.</span><span class="na">doStart</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">_nextScope</span><span class="o">=</span> <span class="o">(</span><span class="n">ScopedHandler</span><span class="o">)</span><span class="n">getChildHandlerByClass</span><span class="o">(</span><span class="n">ScopedHandler</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">finally</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">_outerScope</span><span class="o">==</span><span class="kc">null</span><span class="o">)</span>
</span><span class='line'>                <span class="n">__outerScope</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的_outerScope的初始化我觉得实在是不优雅，显然整个jetty中那个最先初始化的ScopedHandler将会作为所有ScopedHandler的outerScope，显然不能再jetty中提供多个顶层ScopedHandler，这个需求可能是针对WebAppContext专门设计的，但是有点不符合Jetty这种灵活的可插拔式的定义。哪怕通过set方法主动设值都要好的多。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ie6中背景图片缓存的BUG]]></title>
    <link href="http://shenzhang.github.io/blog/2013/07/26/bug-about-background-image-in-ie6/"/>
    <updated>2013-07-26T01:27:00+08:00</updated>
    <id>http://shenzhang.github.io/blog/2013/07/26/bug-about-background-image-in-ie6</id>
    <content type="html"><![CDATA[<p>IE6的bug本来是再寻常不过的事了，感觉表现正常了反而感觉不正常，但是背景图片缓存的bug对整个应用的影响太大了，最后找了半天在stackoverflow上找到了解决方案，在页面加载之初执行下面的语句：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">execCommand</span><span class="p">(</span><span class="s2">&quot;BackgroundImageCache&quot;</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>自己试了下确实完美解决了问题，但是还是不明白该BackgroundImageCache参数是什么意思，会对IE6造成怎样的影响，找了半天MSDN的文档都没有发现该参数，最后在<a href="http://support.microsoft.com/kb/823727/en-us">这里</a>找到了答案.</p>

<p>原来这个可以说是IE6的一个BUG，进而让微软出了一个针对sp1的hotfix来修复该BUG，但是要想激活该pach就需要执行该语句，因此该参数是没有记录在MSDN手册中的也仅仅是对IE6 SP1有效。</p>

<p>但是微软对该bug的描述实在是轻描淡写啊：</p>

<blockquote><p>&ldquo;This problem may occur over a long time (for example, several hours) when you run a script that constantly changes the background color of a button that also contains a background image.&rdquo;</p></blockquote>

<p>实际情况是只要改变任意的style，其元素并且所有子元素的background-image都要重新向服务器请求，这个不但导致浏览器内存升高，还导致服务器的压力增大，页面背景闪烁等多重问题。</p>

<p>没办法，能有解决方法已经谢天谢地了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java中的静态初始化块死锁]]></title>
    <link href="http://shenzhang.github.io/blog/2013/07/25/deadlock-during-static-initialize-in-java/"/>
    <updated>2013-07-25T04:27:00+08:00</updated>
    <id>http://shenzhang.github.io/blog/2013/07/25/deadlock-during-static-initialize-in-java</id>
    <content type="html"><![CDATA[<p>java中的死锁是各式各样的，但是类的静态初始化块死锁却很少被人提到。</p>

<p>实际上jvm对同一个类的静态初始化块的初始化肯定是原子的，而且是限于当前线程内部，死锁主要是发生在不同类静态初始化交叉引用的并发初始化场景。</p>

<p>举个例子，类B的static块应用了C，C的static块引用了B，显然这发生了循环引用，但是如果这种引用发生在同一个线程内，那么jvm可以很好的处理这种循环引用，一般后引用的类会优先初始化，也就是说实际初始化顺序是B > C。</p>

<p>但是，如果这种循环引用出现在了多个线程内，那么就有可能发生死锁，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">B</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;BB&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;before B init&quot;</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;after B timeout&quot;</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">String</span> <span class="n">n</span> <span class="o">=</span> <span class="n">C</span><span class="o">.</span><span class="na">name</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;after B init&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">C</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;CC&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;before C init&quot;</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;after C timeout&quot;</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">String</span> <span class="n">n</span> <span class="o">=</span> <span class="n">B</span><span class="o">.</span><span class="na">name</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;after C init&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个时候线程b中引用了B对象，线程c引用了C对象，在两个线程的sleep时间到了后就发生了死锁，因为B的初始化锁被线程b占有，C的初始化锁被c占有。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reference的回收机制及利用价值]]></title>
    <link href="http://shenzhang.github.io/blog/2013/07/25/collection-for-reference-in-java/"/>
    <updated>2013-07-25T01:27:00+08:00</updated>
    <id>http://shenzhang.github.io/blog/2013/07/25/collection-for-reference-in-java</id>
    <content type="html"><![CDATA[<p>jdk1.2之后提供了四个可以直接和GC交互的Reference:</p>

<ul>
<li>FinalReference</li>
<li>SoftReference</li>
<li>WeakReference</li>
<li>PhantomReference</li>
</ul>


<!-- more -->


<p>他们都共同从Reference继承，这几个Reference都提供了一个ReferenceQueue队列作为构造函数的参数，当Reference所引用的对象被GC回收的时候，该Reference就会被加入到这个队列中去，这样就实现了用户代码和GC的一个交互接口。那么这个过程是如何实现的呢？</p>

<p>Reference类中有一个静态内部类：<code>private static class ReferenceHandler extends Thread</code>, 并且该ReferneceHandler在类初始化的时候就会作为一个daemon线程在后台运行，而且优先级最高：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ThreadGroup</span> <span class="n">tg</span> <span class="o">=</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getThreadGroup</span><span class="o">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">ThreadGroup</span> <span class="n">tgn</span> <span class="o">=</span> <span class="n">tg</span><span class="o">;</span>
</span><span class='line'>         <span class="n">tgn</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>         <span class="n">tg</span> <span class="o">=</span> <span class="n">tgn</span><span class="o">,</span> <span class="n">tgn</span> <span class="o">=</span> <span class="n">tg</span><span class="o">.</span><span class="na">getParent</span><span class="o">());</span>
</span><span class='line'>    <span class="n">Thread</span> <span class="n">handler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ReferenceHandler</span><span class="o">(</span><span class="n">tg</span><span class="o">,</span> <span class="s">&quot;Reference Handler&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="cm">/* If there were a special system-only priority greater than</span>
</span><span class='line'><span class="cm">     * MAX_PRIORITY, it would be used here</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">handler</span><span class="o">.</span><span class="na">setPriority</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">MAX_PRIORITY</span><span class="o">);</span>
</span><span class='line'>    <span class="n">handler</span><span class="o">.</span><span class="na">setDaemon</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>    <span class="n">handler</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>该ReferenceHandler的内部逻辑如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(;;)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">Reference</span> <span class="n">r</span><span class="o">;</span>
</span><span class='line'>          <span class="kd">synchronized</span> <span class="o">(</span><span class="n">lock</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>               <span class="k">if</span> <span class="o">(</span><span class="n">pending</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">r</span> <span class="o">=</span> <span class="n">pending</span><span class="o">;</span>
</span><span class='line'>                    <span class="n">Reference</span> <span class="n">rn</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>                    <span class="n">pending</span> <span class="o">=</span> <span class="o">(</span><span class="n">rn</span> <span class="o">==</span> <span class="n">r</span><span class="o">)</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="n">rn</span><span class="o">;</span>
</span><span class='line'>                    <span class="n">r</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">r</span><span class="o">;</span>
</span><span class='line'>               <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                       <span class="n">lock</span><span class="o">.</span><span class="na">wait</span><span class="o">();</span>
</span><span class='line'>                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'>                    <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>               <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// Fast path for cleaners</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">r</span> <span class="k">instanceof</span> <span class="n">Cleaner</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>             <span class="o">((</span><span class="n">Cleaner</span><span class="o">)</span><span class="n">r</span><span class="o">).</span><span class="na">clean</span><span class="o">();</span>
</span><span class='line'>             <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">ReferenceQueue</span> <span class="n">q</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="na">queue</span><span class="o">;</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">q</span> <span class="o">!=</span> <span class="n">ReferenceQueue</span><span class="o">.</span><span class="na">NULL</span><span class="o">)</span> <span class="n">q</span><span class="o">.</span><span class="na">enqueue</span><span class="o">(</span><span class="n">r</span><span class="o">);</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中，Reference类中有一个lock变量，该lock是会和jvm的gc线程做交互，用来进行互斥操作；pending代表了一个链表，当GC回收一个reference所引用的对象后，会将该reference加入到该链表中，并且通过lock.notify()来唤醒handler线程。handler线程被唤醒后，会遍历pending链表，最终将他们加入到对应的queue中，但是如果该Reference是一个Cleaner的话，会调用它的clean方法来做一些清理操作，并且不会加入到队列中。因此，这一切的一切最关键的还是Reference.lock这个锁对象，jvm会直接操纵该对象以达到交互的目的。</p>

<p>前面提到了Cleaner类，该类只能通过工厂方法Cleaner.create(Object, Runnable)来产生，该类又从PhantomReference继承，因此具有了Reference的特性。该类到底有什么用呢，实际上它就是利用并封装了前面提到的Reference的清理机制，实际上是在和gc做交互，当一个对象被gc后可以调用指定的Runnable。</p>

<p>比如DirectByteBuffer在内部就使用了Cleaner对象，并且将自己以及一个清理Runnable对象传给Cleaner.create来生成Cleaner对象。其目的就是希望在该DirectByteBuffer被gc后，能主动调用清理方法将不受jvm管制的内存给主动释放掉，避免内存泄漏。清理过程如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Deallocator</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Unsafe</span> <span class="n">unsafe</span> <span class="o">=</span> <span class="n">Unsafe</span><span class="o">.</span><span class="na">getUnsafe</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">long</span> <span class="n">address</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">long</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">capacity</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">Deallocator</span><span class="o">(</span><span class="kt">long</span> <span class="n">address</span><span class="o">,</span> <span class="kt">long</span> <span class="n">size</span><span class="o">,</span> <span class="kt">int</span> <span class="n">capacity</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">assert</span> <span class="o">(</span><span class="n">address</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">address</span> <span class="o">=</span> <span class="n">address</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">size</span> <span class="o">=</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">capacity</span> <span class="o">=</span> <span class="n">capacity</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">address</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Paranoia</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">unsafe</span><span class="o">.</span><span class="na">freeMemory</span><span class="o">(</span><span class="n">address</span><span class="o">);</span>
</span><span class='line'>        <span class="n">address</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="n">Bits</span><span class="o">.</span><span class="na">unreserveMemory</span><span class="o">(</span><span class="n">size</span><span class="o">,</span> <span class="n">capacity</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java中的文件打开操作]]></title>
    <link href="http://shenzhang.github.io/blog/2013/07/24/open-file-in-java/"/>
    <updated>2013-07-24T02:27:00+08:00</updated>
    <id>http://shenzhang.github.io/blog/2013/07/24/open-file-in-java</id>
    <content type="html"><![CDATA[<p>java中的文件操作一般都是要通过FileOutputStream/FileInputStream，这两个类可以获得channel通过NIO的手段来操作，或者是通过RandomAccessFile.getChannel()来获得channel并使用NIO。</p>

<p>其实不论FileOutputStream还是RandomAccessFile，都会有一个打开文件的动作，打开文件的结果都会是产生一个FileDescriptor，可以通过<code>FileOutputStream.getDescrptor()</code>或<code>RandomAccessFile.getDescriptor()</code>来获得。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * The system dependent file descriptor.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">FileDescriptor</span> <span class="n">fd</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>实际上就如同名字所表示的，这个就是一个文件描述符，或者在windows里面讲就是一个文件句柄（HANDLE），所有的系统调用都需要这个文件描述符作为参数。</p>

<p>再来看以下几个构造函数：</p>

<p><em>RandomAccessFile(String name, String mode):</em> 该方法会调用RandomAccessFile(File name, String mode)</p>

<p><em>RandomAccessFile(File name, String mode):</em> 根据File对象打开文件，产生FileDescriptor，但是目标File不会做改动，position的位置在0</p>

<p><em>FileOutputStream(File file):</em> 该方法会调用FileOutputStream(File file, false)</p>

<p><em>FileOutputStream(File file, boolean append):</em> 根据File打开文件,如果append = true，目标file不变，position在文件尾；如果append = false,目标文件会被truncate为0，等同于删除并重新创建了这个文件，也就是清空这个文件。并在最后都生成对应的FileDescriptor</p>

<p><em>FileOutputStream(FileDescriptor fd):</em> 由于参数是FileDescriptor，说明这个文件已经是被打开了的，因此该构造函数实际上不会做任何操作，只是将这个fd保存下来，供以后的操作使用。</p>

<p>因此，我们最经常使用的FileOutputStream(File file)这个构造函数是会自动将文件进行truncate操作的，这个需要注意。</p>

<p>对文件的操作实际上都是使用FileDescriptor，因此普通文件操作和获得channel后的nio操作都共享一个fd，也就是说在普通写操作后，对应channel.getPosition也会同样被移动了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hotspot中的JIT]]></title>
    <link href="http://shenzhang.github.io/blog/2013/07/24/jit-in-hotspot/"/>
    <updated>2013-07-24T01:27:00+08:00</updated>
    <id>http://shenzhang.github.io/blog/2013/07/24/jit-in-hotspot</id>
    <content type="html"><![CDATA[<p>hotspot中有两个jit，一个是工作在client模式，一个是工作在server模式，server模式的jit要比client复杂的多，它做了更多的优化工作。</p>

<p>当一个方法被重复执行很多次之后，JIT会考虑将他进行编译成机器码执行，而不再是解释执行。具体的执行次数可以通过设置<code>-XX:CompileThreshold=10000</code>来进行指定。</p>

<p>在jvm运行的时候加上<code>-XX:+PrintCompilation</code>可以开启JIT编译信息，当有方法被JIT编译时，就会在stdout中输出，该选项可以更好的进行调试和优化。</p>

<p>但是有一个例外，当一个方法body很大时，jvm不一定会对它进行JIT编译，在hotspot中这个方法的大小是8000字节，但是我们可以通过加上<code>-XX:-DontCompileHugeMethods</code>参数禁止这种策略，保证所有方法都可以被JIT编译，但是最好不要关闭这个特性！</p>

<p>因此很多时候我们总是担心过多的调用很多小方法会影响执行效率，其实jvm会用jit来帮我们做很多优化，而且就像上面提到的并不是将多个小方法合并到一个大方法中就一定会有更好的效果，可能会被jvm坑了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thread中的stop, suspend, resume方法]]></title>
    <link href="http://shenzhang.github.io/blog/2013/07/23/stop-suspend-resume-of-thread/"/>
    <updated>2013-07-23T02:27:00+08:00</updated>
    <id>http://shenzhang.github.io/blog/2013/07/23/stop-suspend-resume-of-thread</id>
    <content type="html"><![CDATA[<p>这三个方法都被标记为了deprecated，下面就来分析下原因。</p>

<h2>stop()和stop(Throwable e)</h2>

<p>这个方法会无条件的终止一个子线程，并且在子线程的当前执行的地方抛出传入的异常。如果调用stop()函数，则e = ThreadDeath异常。这个异常会一直向上传播，最终导致所有该子线程所具有的锁都被释放。</p>

<p><em>废弃原因：</em>
该方法太过于暴力，可能会让某些处于锁保护的关键区域（对象初始化）还没有完毕就退出，进一步导致这些对象或者操作处于一种不一致的状态，并暴露给系统的其他部分。</p>

<h2>suspend,resume</h2>

<p>这两个方法需要配合起来，suspend会暂时挂起一个线程，resume可以恢复挂起的线程</p>

<p><em>废弃原因：</em>
这两个方法会非常容易导致死锁。因为suspend在挂起一个线程的时候不会释放当前线程上的锁，如果该线程在被resume之前刚好需要请求这些锁，那么resume将永远不会执行，死锁就发生了。下面是我随便写的demo，本来想看看效果，但是却不幸的发生了死锁，可见该方法多么危险：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.TimeUnit</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ThreadDemo</span> <span class="kd">extends</span> <span class="n">Thread</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">ThreadDemo</span> <span class="n">thread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ThreadDemo</span><span class="o">();</span>
</span><span class='line'>      <span class="n">thread</span><span class="o">.</span><span class="na">setDaemon</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>      <span class="n">thread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>      <span class="n">thread</span><span class="o">.</span><span class="na">suspend</span><span class="o">();</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;suspended&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">thread</span><span class="o">.</span><span class="na">resume</span><span class="o">();</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;resumed&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">thread</span><span class="o">.</span><span class="na">isAlive</span><span class="o">());</span>
</span><span class='line'>      <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      <span class="k">while</span> <span class="o">(!</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">isInterrupted</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;running &quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">++);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>调试发现主线程阻塞到了System.out.println(&ldquo;suspended&rdquo;)处，并且产生了死锁，分析原因如下：
子线程调用了out.println()，但是该方法会请求out对象上的锁：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">println</span><span class="o">(</span><span class="n">String</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">print</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>
</span><span class='line'>        <span class="n">newLine</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>子线程被suspend后该锁却并没有释放，主线程又接着调用out.pritln(&ldquo;suspended&rdquo;)，自然会被block，然后产生死锁！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hotspot中的不同GC算法]]></title>
    <link href="http://shenzhang.github.io/blog/2013/07/23/gc-in-hotspot/"/>
    <updated>2013-07-23T01:27:00+08:00</updated>
    <id>http://shenzhang.github.io/blog/2013/07/23/gc-in-hotspot</id>
    <content type="html"><![CDATA[<p>hotspot的GC算法经历了很多个版本发展，在不同阶段也使用了不同的算法，这里仅仅描述了现在主流的hotspot版本(1.6)中常用的GC算法配置方法和表象，对算法的细节不进行描述。</p>

<h2>-XX:+UseSerialGC</h2>

<p>串行垃圾搜集算法，具体表现为：</p>

<p>新生代：</p>

<pre><code>[DefNew: 34944K-&gt;3031K(39296K), 0.0264555 secs] 34944K-&gt;3031K(126720K), 0.0265033 secs] [Times: user=0.03 sys=0.00, real=0.03 secs] 
</code></pre>

<p>老年代：</p>

<pre><code>[GC [DefNew: 37824K-&gt;37824K(39296K), 0.0000274 secs][Tenured: 84770K-&gt;87423K(87424K), 0.6707186 secs] 122594K-&gt;90531K(126720K), [Perm : 2963K-&gt;2963K(12288K)], 0.6708503 secs] [Times: user=0.67 sys=0.00, real=0.67 secs] 
</code></pre>

<p>Full:</p>

<pre><code>[Full GC [Tenured: 87423K-&gt;87423K(87424K), 0.9254085 secs] 126719K-&gt;106207K(126720K), [Perm : 2962K-&gt;2962K(12288K)], 0.9254837 secs] [Times: user=0.92 sys=0.00, real=0.92 secs]
</code></pre>

<h2>-XX:+UseParallelGC</h2>

<p>并行垃圾搜集算法，新生代使用并行，老年代使用Mark-Sweep-Compact(标记，清除，压缩）</p>

<p>新生代：</p>

<pre><code>[GC [PSYoungGen: 35680K-&gt;5432K(38208K)] 35680K-&gt;5636K(125632K), 0.0153779 secs] [Times: user=0.01 sys=0.00, real=0.02 secs]
</code></pre>

<p>full：</p>

<pre><code>[Full GC [PSYoungGen: 32768K-&gt;7374K(38080K)] [PSOldGen: 87423K-&gt;87423K(87424K)] 120191K-&gt;94798K(125504K) [PSPermGen: 2963K-&gt;2963K(12288K)], 0.4979593 secs] [Times: user=0.50 sys=0.00, real=0.50 secs]
</code></pre>

<h2>-XX:+UseParallelOldGC</h2>

<p>并行垃圾搜集，老年代和新生代都是并行垃圾搜集</p>

<p>新生代：</p>

<pre><code>[GC [PSYoungGen: 27552K-&gt;2144K(34432K)] 74201K-&gt;50809K(121856K), 0.0170400 secs] [Times: user=0.06 sys=0.00, real=0.02 secs]
</code></pre>

<p>full：</p>

<pre><code>[Full GC [PSYoungGen: 32768K-&gt;18745K(38080K)] [ParOldGen: 87423K-&gt;87423K(87424K)] 120191K-&gt;106169K(125504K) [PSPermGen: 2962K-&gt;2962K(12288K)], 0.9138238 secs] [Times: user=3.13 sys=0.00, real=0.92 secs] 
</code></pre>

<h2>-XX:+UseConcMarkSweepGC</h2>

<p>标记清除算法，每次只清除一部分死亡对象，基本不会造成stop the world，但是会有内存碎片可以配合以下选项来对碎片问题进行优化：</p>

<pre><code>-XX:+UseCMSCompactAtFullCollection:让full gc的时候，顺便对内存进行整理
-XX:+CMSFullGCsBeforeCompact: 多少次full gc后，再执行full gc时就进行内存整理
</code></pre>

<p>从算法行为上来说有4种类型：</p>

<ol>
<li>Mark-sweep:标记清除，缺点是会有大量内存碎片</li>
<li>复制算法(copying)：简单高效，把存货的对象从一个区域复制到另一个区域，但是在存活率较高的情况下效率会变低（某个对象总是存活，那么自然就要来回复制，如果这些对象生命周期都很短，那么在GC的时候直接就不用复制到另一个区域了）</li>
<li>标记整理（Mark-compact)：同标记清除类似，但是后续操作不是清除死亡的对象，而是把所有存活的对象往内存一边移动，将另外以便的内存所有都清理掉。</li>
<li>分代搜集(具体到每一代又采用了上述三种算法）。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[launchd in MacOS]]></title>
    <link href="http://shenzhang.github.io/blog/2013/07/18/launchd-in-macos/"/>
    <updated>2013-07-18T01:27:00+08:00</updated>
    <id>http://shenzhang.github.io/blog/2013/07/18/launchd-in-macos</id>
    <content type="html"><![CDATA[<p>在《mac下jdk7的乱码分析》中提到了/etc/launchd.conf文件可以作为mac中的系统启动配置文件，类似于/etc/rc.local或init文件，因此对mac的launchd框架做了下了解，边看wiki边把自己的理解记录下来。</p>

<p>launchd是一个开源的服务管理框架，由apple的Dave Zarzycki设计和开发，可以管理系统范围内的服务、应用、进程以及脚本。launchd可以用来代替：init, rc, init.d脚本,rc.d脚本,SystemStarter, inetd/xinetd, crond/atd, watchdogd。确实感觉非常强大，apple设计它就是用来代替这些传统linux组件的，好处显而易见，首先可以让系统管理更加简单，其次就是提高运行效率特别是可以显著缩短开机时间。另外launchd框架不仅仅可以用于osx中，还可以在其他的系统中使用。</p>

<p>在launchd系统中有两个重要的组件：launchd服务和launchctl接口</p>

<p>launchd服务作为传统init进程，在mac中的PID为1，是系统启动的第一个进程，并且由它负责将系统启动起来。在/Libaray/LaunchAgents和/Libaray/LaunchDaemons目录中有一些配置文件用来控制lauchd启动服务的参数。</p>

<p>launchctl接口是一个命令行的应用程序，可以与launchd服务通信是launchd服务提供的用户接口，可以控制launchd管辖的服务，启动或停止任务，获取或设置一些系统参数，比如ulimit的参数就可以通过launchctl来控制。</p>

<h2>launchd</h2>

<p>launchd主要有两个职责：开机的时候启动系统；加载和管理所有的服务。</p>

<p>OSX的启动顺序大致如下：</p>

<ol>
<li><a href="http://en.wikipedia.org/wiki/Open_Firmware">Open Firmware</a>激活，初始化硬件并加载BootX.</li>
<li><a href="http://en.wikipedia.org/wiki/BootX_(Apple\">BootX</a>)加载内核，并且加载需要的内核扩展(kexts)</li>
<li>内核加载launchd</li>
<li>launchd运行/etc/rc，扫描/System/Library/LaunchAgents和/System/Library/LaunchDaemons目录，根据需要读取其中的plist文件配置，最后启动登陆窗口</li>
</ol>


<p>在第四步，launchd会扫描一些不同的目录，但是主要包括两类：LaunchDaemons和LaunchAgents。LaunchDaemons中包含了那些需要以root身份运行的，并且是作为后台服务的进程；LaunchAgents包含了很多任务(agent应用)，会运行在用户环境。</p>

<p>最重要的是launchd不同于SystemStarter，它不会在系统启动的时候真正启动所有的服务，它的思想类似与xinetd，是一种按需加载。在系统启动的时候，它会扫描所有jobs的plist文件，如果plist中包含了OnDemand键的话，那么该服务就不会在启动的时候立刻加载，launchd会一直保持监听状态，如果有其他程序需要该服务，那么launchd就会立刻将它启动起来，如果不再有需要了，launchd又会将它关闭。如果一个服务已经启动了，launchd又会像watchlog一样对这些服务保持监控，如果有哪个服务出现异常launchd还会重新启动它。</p>

<h2>launchctl</h2>

<p>在OSX中，可以使用launchctl来集中对服务进行管理。可以通过控制台、标准输入或者交互模式来对launchctl发送命令，一些永久的命令还可以写在/etc/launchd.conf中，或者对于不同的用户写在~/.launchd.conf中(不是所有的OSX都支持)。更多launchctl的参数可以参见man手册。</p>

<h2>Property list</h2>

<p>Property list(plist)文件被用来向launchd提供程序的启动配置，当launchd扫描这个文件或者通过launchctl提交一个job，launchd就会读取这个job对应的plist文件来决定怎样启动它。常用的plist参数包括：</p>

<pre><code>Label:job的名称，模式是plist文件的名称，比如说fish.plist，那么默认的Label就是fish
Program:程序的路径
ProgramArguments:运行参数。（Program或者ProgramArguments必须要至少指定一个）
UserName:以哪个用户来运行该job
RunAtLoad:是否加载之后就立刻运行(默认是NO）
WorkingDirectory:job的工作目录，也就是在运行该job前执行chdired的目录。
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mac下jdk7的乱码分析]]></title>
    <link href="http://shenzhang.github.io/blog/2013/07/13/charset-for-jdk7-in-macos/"/>
    <updated>2013-07-13T01:27:00+08:00</updated>
    <id>http://shenzhang.github.io/blog/2013/07/13/charset-for-jdk7-in-macos</id>
    <content type="html"><![CDATA[<p>mac中默认的jdk是1.6的，而且该版本是由Apple自己提供的，估计是定制性比较高，但是jdk中没有src.zip源码文件，因此决定安装oracle的官方版本。oracle目前仅仅提供了1.7+的mac版，下载安装后发现安装的jdk的目录结构和传统win或linux上的不太一样，甚至连JAVA_HOME怎么设置都不太确定，看了下官方的介绍大致明白了，也知道了java_home这个工具，确实有点意思。最后打开eclipse，添加了新的jre，配置了src，正准备继续工作时出现了最悲剧的事情，所有以中文命名的文件夹、包和文件都显示不出来了，但是本地却是实际存在的，进一步发现用eclipse新创建的中文名文件可以正常显示，但是在finder中确是？了。在网上粗略搜了下，原来很多同学都遇到了这个情况，所有的建议都是删除1.7，重新使用apple的1.6版本。由于这也不算是长久之计，因此打算自己排查下问题的原因。</p>

<!--more-->


<p>首先，出现乱码肯定是编码不一致的问题，因此可以说是eclipse使用的编码和系统使用的编码不一致，而mac系统使用的编码是UTF-8，因此只能说明是eclipse启动之后使用了其他编码。那是不是eclipse本身的问题呢？</p>

<p>随后简单写了个小程序，内容是在文件系统上创建一个中文文件，接着将该程序打成jar，设置了Main-Class，丢到了finder中。然后在Finder中双击执行(没有使用java -jar，是想让运行环境和eclipse的启动方式保持一致），发现同样在finder中生成了带有？的文件，看来问题的根源不是eclipse，而是jre本身。</p>

<p>java执行环境中所涉及到和编码相关的属性目前我就知道一个file.encoding，该属性是在jvm启动的时候就确定了，官方对该属性的描述较少，但是基本上会参考系统的语言和编码，以及运行文件的本身编码。比如说在windows下你的java文件是UTF-8的，那么运行后file.encoding=UTF-8，如果把文件格式改为GBK的，那么运行后的file.encoding=GBK，虽然windows的默认编码是GBK的，但是file.encoding不完全按照系统的编码来设定。可是在该问题中应该也不存在问题啊，系统是UTF-8的，文件也是UTF-8的，不管那么多了，还是把之前写的小程序改了下，直接输出System.getProperty(&ldquo;file.encoding&rdquo;)，运行后发现是US_ASCI，接着又使用jvisualvm来了下eclipse当前进程的jvm系统参数，里面的file.encoding果然也是US_ASCI，这应该确实是jdk7在MAC下的一个bug。</p>

<p>好了，既然这是个BUG，那么就想想怎么去弥补它，比如显示告诉java我要使用utf-8格式。首先，不可能我要运行程序都使用java -Dfile.encoding=&hellip; 这种命令行式的方式来启动吧，我需要的是一个全局设置的地方。找了老半天，终于找到了JAVA_TOOL_OPTIONS这个系统属性，该属性设置的值会在jvm启动时当作jvm的参数来运行。OK，那我把这个属性设置到哪里呢，~/.profile肯定不行，这个是个人的环境文件，也就是说只有在使用或登陆终端的时候才会被执行，但是GUI的程序显然是不会通过终端来执行的，我需要的一个更加全局范围内的。我立刻想到了/etc/.profile, /etc/rc.local这些文件，但是发现MAC中都是没有的，找了许久才在<a href="http://www.digitaledgesw.com/node/31">这里</a>找到了方法：/etc/launchd.conf。随后在该文件里写入：</p>

<pre><code>setenv JAVA_HOME_OPTIONS -Dfile.encoding=UTF-8
</code></pre>

<p>重启系统，发现确实该环境变量确实有效，之前那个jar包小程序也顺利输出了UTF-8，jvisualvm里也看到了eclipse进程的file.encoding=UTF-8，但是问题依然没有解决。随后索性将jvisualvm里的所有系统属性copy出来排查了下，发现和编码相关的属性除了file.encoding之外还有一个sun.jnu.encoding，而且该属性还是US_ASCII的。查阅了相关资料，发现该属性才是真正控制文件及路径的编码的，包括读写操作，并且默认是file.encoding，看来需要也将该属性也给改下了。但是，在/etc/launchd.conf中写下了：<code>setenv JAVA_HOME_OPTIONS "-Dfile.encoding=UTF-8 -Dsun.jnu.encoding=UTF-8"</code>后发现JAVA_HOME_OPTIONS都没能设置成功，试了很多种方法都不行，也许是语法错了吧。</p>

<p>上面的分析都已经很到位了，但是还是未能成功，接着想了下，虽说这个是JDK7的bug，但是它也会根据一些系统环境了做判断，最和这个相关的系统环境变量就是LANG系列的变量了，抱着试一试的态度在/etc/launchd.conf中设置了：
setenv LC_ALL zh_CN.UTF-8
重启后，发现成功了，file.encoding和sun.jnu.encoding都是UTF-8的了，另外又试了下en_US.UTF-8发现竟然不行，其原因还不太清楚。</p>

<p>历时三个小时，终于还是解决了该问题，觉得该方案应该是目前最完美的解决方案，随后在oracle官网上发现已经有人提交了该问题的bug，期待oracle官方的更新吧。据说早期版本的jdk7在mac中运行的编码是MacRoman，出现了乱码问题，随即有人提交了该问题的，结果oracle在后续版本中的确做了修改，把默认编码改成了US_ASCII&hellip;，一直延续到了现在。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[页表(Page Table)[译]]]></title>
    <link href="http://shenzhang.github.io/blog/2013/07/10/pagetable/"/>
    <updated>2013-07-10T01:27:00+08:00</updated>
    <id>http://shenzhang.github.io/blog/2013/07/10/pagetable</id>
    <content type="html"><![CDATA[<p>页表是操作系统中存储系统中的重要概念，wiki中对页表的解释非常详尽，<a href="http://en.wikipedia.org/wiki/Page_table">原文链接</a>。</p>

<p>页表是一种数据结构，操作系统的虚拟内存系统使用页表来存储虚拟内存地址和物理地址的映射关系。虚拟地址对每一个独立的进程来说都是唯一的。物理地址对硬件是唯一的，比如说内存。</p>

<!--more-->


<h2>页表的作用</h2>

<p>在使用虚拟内存的操作系统中，每个进程都感觉自己在使用一片很大的并且连续的内存区域。但是实际上，每个进程可能会被分散在物理内存区域上，或者已经被交换到了后备存储中（比如说硬盘）。当一个进程试图请求自己的一个内存地址，操作系统就必须将该进程提交的虚拟内存地址映射成该地址实际存放的物理地址。页表就是用来存储虚拟地址与物理地址之间映射关系的地方。每一个映射就是一个页表项(Page Table Entry，PTE)。</p>

<p><img src="http://shenzhang.github.io/images/2013/07/vitualaddress.png"></p>

<h2>映射过程</h2>

<p><img src="http://shenzhang.github.io/images/2013/07/tlb.png"></p>

<p>CPU的内存管理单元(MMU)用一个缓存（cache）来存放最近从页表得到的一些映射项。这又被称为TLB（translation lookaside buffer)，它是一种关联缓冲区，会被优先查找。如果一个匹配项找到（TLB命中），对应的物理地址会立刻返回，并且内存访问操作可以继续了。如果TLB没有命中，那么处理器就会从页表中查找是否这个虚拟内存地址的映射项已经存在。如果在页表中找到了，操作系统还会将该映射项写会到TLB中（这步必须要做，因为虚拟内存系统只能从TLB中返回物理地址），接着就会出发一个中断（可能会并行触发），让后续的操作重新到TLB中查找映射项，这个时候就会TLB命中，返回物理地址，接着就可以真正访问内存了。</p>

<h2>映射失败</h2>

<p>在页表中查找可能会因为两个原因导致失败。首先可能页表中没有这个虚拟地址的映射项，说明这个虚拟地址的内存访问操作是非法的，这通常是一种程序错误，并且操作系统必须能够发现并处理这种错误。在现代操作系统中通常会向该程序发送一个段错误（segmentation fault）。</p>

<p>另外，如果该虚拟地址对应的页不在物理内存中也可能会导致页表查找失败。这通常是因为操作系统为了给其他页腾出物理内存而将该页交换出去了。这样请求的页就会被放在后备存储中，比如硬盘（这里的后备存储通常页被称为“交换区”，一般以磁盘分区或者交换文件的形式存在）。这个时候操作系统就需要将该页从磁盘中加载到内存里。</p>

<p>如果物理内存还有空间，这个操作就很简单：该页直接写回到物理内存里，更新页表和TLB，最后重启映射指令（过程）。但是，如果物理内存已经满了，一个或多个存在于物理内存的页就需要被交换出去以腾出空间来放这个需要加载进来的页。页表需要更新，并且标注出那些被交换出去了的页和被加载进来的页。TLB也会被更新，主要是移除那些被交换出去了的页（已经不在内存中了）。最后重启映射指令。</p>

<h2>页表数据</h2>

<p>最简单的页表系统通常维护了一个帧表和一个页表。帧表记录了哪些帧被映射了，在更高级的系统中，帧表还维护了一个页属于哪个地址空间，统计信息等。</p>

<p>页表维护了一个页的虚拟地址与物理帧的物理地址的对应关系，还会有一些辅助信息，比如存在位、修改位、地址空间、进程ID等等。</p>

<p>后备存储，比如说磁盘，可以被用来扩充内存。页可以在物理内存和磁盘之间来回交换。存在位可以标识出该页是否存在于物理内存中，还是在磁盘上，这会决定不同的后续操作（比如是否需要从物理地址中交换出去一些页，再将该页加载进来）。</p>

<p>更新位可以被用来做性能优化。如果一个页被从磁盘中加载到内存里，然后仅仅被用于读操作，当它需要再一次被交换出去时可以不需要写回磁盘，因为这个页从磁盘加载进来后从来没有被改变过。如果这个页在内存中，并且被更新了，那么页表中对应的页表项就需要将更新位给设置上去，以便下次需要将该页交换出去时告知操作系统该页需要写回磁盘。这种策略要求后备存储（磁盘）一直保存一个页的副本（就算该页已经被载入物理内存），以至于当页没有修改并且需要换出时不用再次写回磁盘。如果不使用更新位，那么后备存储占用的大小就是当时被换出的页的总大小；如果使用了更新位，那么在某些时候一些页就会同时存在于物理内存和磁盘上。</p>

<p>在非单一地址空间的操作系统中，虚拟内存管理系统需要使用地址空间信息或进程ID信息来判断页文件时属于哪个进程。两个进程可以使用两个相同的虚拟内存地址，因此页表需要使用一些额外的方法来为这两个进程提供两个不同的地址映射，比如使用两个进程不同的地址空间映射标识符，或者使用这两个进程的ID信息。将进程ID和虚拟内存页关联起来也有助于改善页换出阶段的页选择过程，比如对于一些主代码页已经被换出的进程，它的其他页通常不会很快就被使用，因此相比一些活跃进程，该进程的页可以优先被选择交换出去。</p>

<p>用进程唯一标识符来标记页表项的另一个方法是，对于不同进程的页表被放在了不同的虚拟内存空间中，进而页表变成了进程上下文的一部分。那么，当一个进程不在活跃时，它的页表就有可能也被交换出去。</p>

<h2>页表类型</h2>

<p>目前有许多种不同类型的页表，他们适用于不同的应用场景。一个最基本的页表需要存储虚拟地址信息，并且在其中又包含了对应的物理地址，或许也会包含一些地址空间信息。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jetty中的classloader]]></title>
    <link href="http://shenzhang.github.io/blog/2013/07/06/classloader-in-jetty/"/>
    <updated>2013-07-06T01:27:00+08:00</updated>
    <id>http://shenzhang.github.io/blog/2013/07/06/classloader-in-jetty</id>
    <content type="html"><![CDATA[<p>web容器的类加载机制要比普通java应用复杂一些。通常来说每一个webcontext(web应用或者war文件）都有一个对应classloader，并且以system classloader作为其父loader。但是servlet规范描述了更加复杂的情况(相比传统的双亲委派模式)：</p>

<ol>
<li>位于WEB-INF/lib或WEB-INF/classes里的类始终应该优先被加载，这个是和传统的双亲委派模式相反的。</li>
<li>系统类(System class)比如java.lang.String需要排除在第1种情况之外，你不能试图在WEB-INF/lib或WEB-INF/classes中替换系统类。但是规范中并没有清楚的说明具体哪些类属于系统类，并且没有说明javax开头的类是不是都需要当作系统类处理。</li>
<li>server的实现类，比如说org.eclipse.jetty.server.Server需要被排除在web应用的类加载体系之外，也就是说这个类是不能被web应用加载。但是规范里也没有说明哪些类是server类，并且也没有说明一些常规类库比如说Xerces解析器是否应该被当成server实现类的一部分。</li>
</ol>


<!--more-->


<p>Jetty针对上面提到的三种情况都分别提供了对应的配置项。你可以通过调用org.eclipse.jetty.webapp.WebAppContext中的一些方法来配置webapp类加载的细节。但是不能在jetty-web.xml,因为类加载的配置是限于该文件执行的。</p>

<h2>控制webapp类加载的优先级</h2>

<p><code>org.eclipse.jetty.webapp.WebAppContext.setParentLoaderPriority(boolean)</code>方法可以控制webapp class和system class谁的优先级更高。如果你设置为false（默认），那么jetty会认为webapp中的class的优先级更高。如果webapp中的一些类被一些有parent classloader加载的class所引用，那么可能就会有问题，因为系统对同一个类可能会出现两个版本（一个是由父classloader加载，一个由webapp classloader加载）。</p>

<p>如果设置为true，那么jetty将会采用JavaSE中通常的双亲优先委派模型。这可以避免上面提到的多版本的问题，但是由父classloader加载的类版本需要适合所有的webapp（webapp自己配置的class不能优先得到加载，因此很有可能都会使用parent加载的类，因此parent提供的类一定要满足所有app的要求）。</p>

<h2>设置系统类</h2>

<p>可以通过调用<code>org.eclipse.jetty.webapp.WebAppContext.setSystemClasses(String Array)</code>或<code>org.eclipse.jetty.webapp.WebAppContext.addSystemClass(String)</code>来更好的控制哪些类是属于系统类：</p>

<ol>
<li>webapp可以使用系统类</li>
<li>webapp不能替换系统类</li>
</ol>


<p>默认的系统类有：java., javax., org.xml., org.w3c., org.apache.commons.logging., org.eclipse.jetty.continuation., org.eclipse.jetty.jndi., org.eclipse.jetty.plus.jaas., org.eclipse.jetty.websocket., org.eclipse.jetty.servlet.DefaultServlet</p>

<h2>设置server类</h2>

<p>可以通过调用<code>org.eclipse.jetty.webapp.WebAppContext.setServerClasses(String Array)</code>或<code>org.eclipse.jetty.webapp.WebAppContext.addServerClass(String)</code>来主动设置哪些类会被当成server类：</p>

<ol>
<li>webapp不能访问这些类</li>
<li>webapp可以替换这些类</li>
</ol>


<p>默认的server类配置有：-org.eclipse.jetty.continuation., -org.eclipse.jetty.jndi., -org.eclipse.jetty.plus.jaas., -org.eclipse.jetty.websocket., -org.eclipse.jetty.servlet.DefaultServlet, org.eclipse.jetty.
前面加了减号(&ndash;)的代表排除（不隐藏）。</p>

<h2>配置额外的classpath(start.jar)</h2>

<p>如果使用start.jar来启动jetty，那么jetty会从$jetty.home/lib(不包含子目录)中自动的加载jars。默认的配置包括：</p>

<ol>
<li>将$jetty.home/lib/ext配置到classpath中。因此可以在该目录中放置额外的jar。</li>
<li>将$jetty.home/resources配置到classpath中。可以在该目录防止额外的类或者资源。</li>
<li>添加path参数中指定的路径到classpath中。</li>
</ol>


<h2>extraClasspath()方法</h2>

<p>可以通过调用<code>org.eclipse.jetty.webapp.WebAppContext.setExtraClasspath(String)</code>来给webapp classloader设置额外的classpath，当有多个路径时需要用逗号分隔。</p>

<pre><code>&lt;Configure class="org.eclipse.jetty.webapp.WebAppContext"&gt;
 ...
 &lt;Set name="extraClasspath&gt;../my/classes,../my/jars/special.jar,../my/jars/other.jar&gt;
 &lt;/Set&gt;
 ...
</code></pre>

<h2>使用自定义的WebAppClassLoader</h2>

<p>如果上述方法还是不能满足需求，就可以从WebAppClassLoader继承以实现自定义的classloader，并将该classloader设置给WebAppContext就可以了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">MyCleverClassLoader</span> <span class="n">myCleverClassLoader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyCleverClassLoader</span><span class="o">();</span>
</span><span class='line'> <span class="o">...</span>
</span><span class='line'><span class="n">WebAppContext</span> <span class="n">webapp</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WebAppContext</span><span class="o">();</span>
</span><span class='line'> <span class="o">...</span>
</span><span class='line'><span class="n">webapp</span><span class="o">.</span><span class="na">setClassLoader</span><span class="o">(</span><span class="n">myCleverClassLoader</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jetty配置虚拟主机]]></title>
    <link href="http://shenzhang.github.io/blog/2013/07/05/config-virtual-host-in-jetty/"/>
    <updated>2013-07-05T02:27:00+08:00</updated>
    <id>http://shenzhang.github.io/blog/2013/07/05/config-virtual-host-in-jetty</id>
    <content type="html"><![CDATA[<p>虚拟主机是注册在DNS上的IP地址的别名。虚拟主机配置通常有两个模式：
1.多个名字对应一个IP地址
2.如果一个机器有多个网卡，那么可能会给每个网卡的IP地址都分配一个主机名</p>

<p>Jetty的用户在使用的时候通常会考虑多主机名的问题，也就是虚拟主机的问题。通常，只有一个IP地址的机器会配置多个主机名或者域名给这个IP地址，部署在该机器的web应用需要给不同的主机名同时提供服务。另外一种情况是给不同的主机名提供不同的web服务。</p>

<p>不管使用xml文件还是通过编程的模式给Jetty设置虚拟主机最终实际上都是使用<code>ContextHandler.setVitualHosts</code>方法。</p>

<!--more-->


<h2>配置虚拟主机</h2>

<p>比如说有一台机器的IP地址和DNS域名如下：</p>

<pre><code>333.444.555.666
127.0.0.1
www.blah.com
www.blah.net
www.blah.org
</code></pre>

<p>有一个webapp，xxx.war，你希望所有上述的IP地址和域名都能够正常访问，那么可以这样配置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;Configure</span> <span class="na">class=</span><span class="s">&quot;org.eclipse.jetty.webapp.WebAppContext&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;contextPath&quot;</span><span class="nt">&gt;</span>/xxx<span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;war&quot;</span><span class="nt">&gt;&lt;SystemProperty</span> <span class="na">name=</span><span class="s">&quot;jetty.home&quot;</span><span class="nt">/&gt;</span>/webapps/xxx.war<span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;virtualHosts&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Array</span> <span class="na">type=</span><span class="s">&quot;java.lang.String&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Item&gt;</span>333.444.555.666<span class="nt">&lt;/Item&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Item&gt;</span>127.0.0.1<span class="nt">&lt;/Item&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Item&gt;</span>www.blah.com<span class="nt">&lt;/Item&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Item&gt;</span>www.blah.net<span class="nt">&lt;/Item&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Item&gt;</span>www.blah.org<span class="nt">&lt;/Item&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/Array&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/Set&gt;</span>
</span><span class='line'><span class="nt">&lt;/Configure&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果对应的链接器(connector)正在监听8080端口，那么可以通过如下地址访问系统：</p>

<pre><code>http://333.444.555.666:8080/xxx
http://127.0.0.1:8080/xxx
http://www.blah.com:8080/xxx
http://www.blah.net:8080/xxx
http://www.blah.org:8080/xxx
</code></pre>

<p>需要注意的是，除了上述地址之外的其他地址是无法访问系统的，关于虚拟主机的源代码请参见<code>org.eclipse.jetty.server.handler.ContextHandler::checkContext()</code>方法。</p>

<h2>为不同的app配置不同的虚拟主机</h2>

<p>比如说你的机器有下面的IP地址和DNS域名：</p>

<pre><code>333.444.555.666
127.0.0.1
www.blah.com
www.blah.net
www.blah.org
777.888.888.111
www.other.com
www.other.net
www.other.org
</code></pre>

<p>你希望除了xxx.war之外，zzz.war可以被777.888.888.111, www.other.com, www.other.net和www.other.org访问，那么可以这样配置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="c">&lt;!-- webapp xxx.war --&gt;</span>
</span><span class='line'><span class="nt">&lt;Configure</span> <span class="na">class=</span><span class="s">&quot;org.eclipse.jetty.webapp.WebAppContext&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;contextPath&quot;</span><span class="nt">&gt;</span>/xxx<span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;war&quot;</span><span class="nt">&gt;&lt;SystemProperty</span> <span class="na">name=</span><span class="s">&quot;jetty.home&quot;</span><span class="nt">/&gt;</span>/webapps/xxx.war<span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;virtualHosts&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Array</span> <span class="na">type=</span><span class="s">&quot;java.lang.String&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Item&gt;</span>333.444.555.666<span class="nt">&lt;/Item&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Item&gt;</span>127.0.0.1<span class="nt">&lt;/Item&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Item&gt;</span>www.blah.com<span class="nt">&lt;/Item&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Item&gt;</span>www.blah.net<span class="nt">&lt;/Item&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Item&gt;</span>www.blah.org<span class="nt">&lt;/Item&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/Array&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/Set&gt;</span>
</span><span class='line'><span class="nt">&lt;/Configure&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="c">&lt;!-- webapp zzz.war --&gt;</span>
</span><span class='line'><span class="nt">&lt;Configure</span> <span class="na">class=</span><span class="s">&quot;org.eclipse.jetty.webapp.WebAppContext&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;contextPath&quot;</span><span class="nt">&gt;</span>/zzz<span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;war&quot;</span><span class="nt">&gt;&lt;SystemProperty</span> <span class="na">name=</span><span class="s">&quot;jetty.home&quot;</span><span class="nt">/&gt;</span>/webapps/zzz.war<span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;virtualHosts&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Array</span> <span class="na">type=</span><span class="s">&quot;java.lang.String&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Item&gt;</span>777.888.888.111<span class="nt">&lt;/Item&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Item&gt;</span>www.other.com<span class="nt">&lt;/Item&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Item&gt;</span>www.other.net<span class="nt">&lt;/Item&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Item&gt;</span>www.other.org<span class="nt">&lt;/Item&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/Array&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/Set&gt;</span>
</span><span class='line'><span class="nt">&lt;/Configure&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个时候zzz.war就可以被下面的地址访问了：</p>

<pre><code>http://777.888.888.111:8080/zzz
http://www.other.com:8080/zzz
http://www.other.net:8080/zzz
http://www.other.org:8080/zzz
</code></pre>

<p>实际上xxx.war和zzz.war是分别用了两个WebAppContext来配置的，也就是说jetty在将请求发送到实际的handler之前会根据context来找到对应的WebAppContext，最后再通过对应的WebAppContext来进行虚拟主机的判断。</p>

<h2>给相同context的不同app配置不同的虚拟主机</h2>

<p>上一个例子很容易理解，这个例子更具有一般性，两个app的context都在根目录下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;Configure</span> <span class="na">class=</span><span class="s">&quot;org.eclipse.jetty.webapp.WebAppContext&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;war&quot;</span><span class="nt">&gt;&lt;SystemProperty</span> <span class="na">name=</span><span class="s">&quot;jetty.home&quot;</span><span class="nt">/&gt;</span>/webapps/xxx.war<span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;contextPath&quot;</span><span class="nt">&gt;</span>/<span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;virtualHosts&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Array</span> <span class="na">type=</span><span class="s">&quot;java.lang.String&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Item&gt;</span>333.444.555.666<span class="nt">&lt;/Item&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Item&gt;</span>127.0.0.1<span class="nt">&lt;/Item&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Item&gt;</span>www.blah.com<span class="nt">&lt;/Item&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Item&gt;</span>www.blah.net<span class="nt">&lt;/Item&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Item&gt;</span>www.blah.org<span class="nt">&lt;/Item&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/Array&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/Set&gt;</span>
</span><span class='line'><span class="nt">&lt;/Configure&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;Configure</span> <span class="na">class=</span><span class="s">&quot;org.eclipse.jetty.webapp.WebAppContext&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;war&quot;</span><span class="nt">&gt;&lt;SystemProperty</span> <span class="na">name=</span><span class="s">&quot;jetty.home&quot;</span><span class="nt">/&gt;</span>/webapps/zzz.war<span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;contextPath&quot;</span><span class="nt">&gt;</span>/<span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;virtualHosts&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Array</span> <span class="na">type=</span><span class="s">&quot;java.lang.String&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Item&gt;</span>777.888.888.111<span class="nt">&lt;/Item&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Item&gt;</span>www.other.com<span class="nt">&lt;/Item&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Item&gt;</span>www.other.net<span class="nt">&lt;/Item&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Item&gt;</span>www.other.org<span class="nt">&lt;/Item&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/Array&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/Set&gt;</span>
</span><span class='line'><span class="nt">&lt;/Configure&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在xxx.war可以这样访问：</p>

<pre><code>http://333.444.555.666:8080/
http://127.0.0.1:8080/
http://www.blah.com:8080/
http://www.blah.net:8080/
http://www.blah.org:8080/
</code></pre>

<p>zzz.war可以这样访问：</p>

<pre><code>http://777.888.888.111:8080/
http://www.other.com:8080/
http://www.other.net:8080/
http://www.other.org:8080/
</code></pre>

<p>对于该部分的jetty处理逻辑可以参见：<code>org.eclipse.jetty.server.handler.ContextHandlerCollection::handler()</code>方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jetty的RequestLog(请求日志)]]></title>
    <link href="http://shenzhang.github.io/blog/2013/07/05/request-log-in-jetty/"/>
    <updated>2013-07-05T01:27:00+08:00</updated>
    <id>http://shenzhang.github.io/blog/2013/07/05/request-log-in-jetty</id>
    <content type="html"><![CDATA[<p>请求日志记录了所有服务器已经处理过的请求。每个请求都会对应一个请求日志，而且通常是标准的NCSA格式，因此他们可以非常容易的被一些分析工具分析，比如<a href="http://www.webalizer.org/">webalizer</a>.</p>

<!--more-->


<p>一条标准的请求日志包括客户端IP，时间，请求方法(get,post&hellip;),url,请求大小,响应状态码,referer头,userAgent等。比如：</p>

<pre><code> 123.4.5.6 - - [27/Aug/2004:10:16:17 +0000]
  "GET /jetty/tut/XmlConfiguration.html HTTP/1.1"
  200 76793 "http://localhost:8080/jetty/tut/logging.html"
  "Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.6) Gecko/20040614 Firefox/0.8"
</code></pre>

<h2>实现方法</h2>

<p>Jetty提供了一个实现NCSARequestLog，它支持NCSA格式，并且日志文件每天都会创建新的日志文件(roll over)。</p>

<p>如果觉得默认的实现不能满足要求，还可以实现RequestLog.java来自定义logger，然后将该logger配置到server中。</p>

<h2>配置request log</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;handler&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;New</span> <span class="na">id=</span><span class="s">&quot;Handlers&quot;</span> <span class="na">class=</span><span class="s">&quot;org.eclipse.jetty.server.handler.HandlerCollection&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;handlers&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Array</span> <span class="na">type=</span><span class="s">&quot;org.eclipse.jetty.server.Handler&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Item&gt;</span>
</span><span class='line'>          <span class="nt">&lt;New</span> <span class="na">id=</span><span class="s">&quot;Contexts&quot;</span> <span class="na">class=</span><span class="s">&quot;org.eclipse.jetty.server.handler.ContextHandlerCollection&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/Item&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Item&gt;</span>
</span><span class='line'>          <span class="nt">&lt;New</span> <span class="na">id=</span><span class="s">&quot;DefaultHandler&quot;</span> <span class="na">class=</span><span class="s">&quot;org.eclipse.jetty.server.handler.DefaultHandler&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/Item&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Item&gt;</span>
</span><span class='line'>          <span class="nt">&lt;New</span> <span class="na">id=</span><span class="s">&quot;RequestLog&quot;</span> <span class="na">class=</span><span class="s">&quot;org.eclipse.jetty.server.handler.RequestLogHandler&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/Item&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/Array&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/New&gt;</span>
</span><span class='line'><span class="nt">&lt;/Set&gt;</span>
</span><span class='line'><span class="nt">&lt;Ref</span> <span class="na">id=</span><span class="s">&quot;RequestLog&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;requestLog&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;New</span> <span class="na">id=</span><span class="s">&quot;RequestLogImpl&quot;</span> <span class="na">class=</span><span class="s">&quot;org.eclipse.jetty.server.NCSARequestLog&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Arg&gt;&lt;SystemProperty</span> <span class="na">name=</span><span class="s">&quot;jetty.logs&quot;</span> <span class="na">default=</span><span class="s">&quot;./logs&quot;</span><span class="nt">/&gt;</span>/yyyy_mm_dd.request.log<span class="nt">&lt;/Arg&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;retainDays&quot;</span><span class="nt">&gt;</span>90<span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;append&quot;</span><span class="nt">&gt;</span>true<span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;extended&quot;</span><span class="nt">&gt;</span>false<span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;LogTimeZone&quot;</span><span class="nt">&gt;</span>GMT<span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/New&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/Set&gt;</span>
</span><span class='line'><span class="nt">&lt;/Ref&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>对应的java代码为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">HandlerCollection</span> <span class="n">handlers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HandlerCollection</span><span class="o">();</span>
</span><span class='line'><span class="n">ContextHandlerCollection</span> <span class="n">contexts</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ContextHandlerCollection</span><span class="o">();</span>
</span><span class='line'><span class="n">RequestLogHandler</span> <span class="n">requestLogHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RequestLogHandler</span><span class="o">();</span>
</span><span class='line'><span class="n">handlers</span><span class="o">.</span><span class="na">setHandlers</span><span class="o">(</span><span class="k">new</span> <span class="n">Handler</span><span class="o">[]{</span><span class="n">contexts</span><span class="o">,</span><span class="k">new</span> <span class="n">DefaultHandler</span><span class="o">(),</span><span class="n">requestLogHandler</span><span class="o">});</span>
</span><span class='line'><span class="n">server</span><span class="o">.</span><span class="na">setHandler</span><span class="o">(</span><span class="n">handlers</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">NCSARequestLog</span> <span class="n">requestLog</span> <span class="o">=</span> <span class="k">new</span> <span class="n">NCSARequestLog</span><span class="o">(</span><span class="s">&quot;./logs/jetty-yyyy_mm_dd.request.log&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">requestLog</span><span class="o">.</span><span class="na">setRetainDays</span><span class="o">(</span><span class="mi">90</span><span class="o">);</span>
</span><span class='line'><span class="n">requestLog</span><span class="o">.</span><span class="na">setAppend</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'><span class="n">requestLog</span><span class="o">.</span><span class="na">setExtended</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'><span class="n">requestLog</span><span class="o">.</span><span class="na">setLogTimeZone</span><span class="o">(</span><span class="s">&quot;GMT&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">requestLogHandler</span><span class="o">.</span><span class="na">setRequestLog</span><span class="o">(</span><span class="n">requestLog</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>默认的日志会记录在<code>$JETTY_HOME/logs</code>下，日志的文件名包含了日志记录的时间。老的日志文件最多会只保存90天，然后会被删除。</p>

<h2>针对不同的context配置requestlog</h2>

<p>下面的代码需要被放在context.xml文件中，以便针对单个webapp配置独立的requestlog：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;Configure</span> <span class="na">class=</span><span class="s">&quot;org.eclipse.jetty.webapp.WebAppContext&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  ...
</span><span class='line'>  <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;handler&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;New</span> <span class="na">id=</span><span class="s">&quot;RequestLog&quot;</span> <span class="na">class=</span><span class="s">&quot;org.eclipse.jetty.server.handler.RequestLogHandler&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;requestLog&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;New</span> <span class="na">id=</span><span class="s">&quot;RequestLogImpl&quot;</span> <span class="na">class=</span><span class="s">&quot;org.eclipse.jetty.server.NCSARequestLog&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;filename&quot;</span><span class="nt">&gt;&lt;Property</span> <span class="na">name=</span><span class="s">&quot;jetty.logs&quot;</span> <span class="na">default=</span><span class="s">&quot;./logs&quot;</span><span class="nt">/&gt;</span>/test-yyyy_mm_dd.request.log<span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>          <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;filenameDateFormat&quot;</span><span class="nt">&gt;</span>yyyy_MM_dd<span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>          <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;LogTimeZone&quot;</span><span class="nt">&gt;</span>GMT<span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>          <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;retainDays&quot;</span><span class="nt">&gt;</span>90<span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>          <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;append&quot;</span><span class="nt">&gt;</span>true<span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/New&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/New&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>  ...
</span><span class='line'><span class="nt">&lt;/Configure&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[非root用户监听80端口]]></title>
    <link href="http://shenzhang.github.io/blog/2013/07/04/listening-80port-for-non-root-user/"/>
    <updated>2013-07-04T03:27:00+08:00</updated>
    <id>http://shenzhang.github.io/blog/2013/07/04/listening-80port-for-non-root-user</id>
    <content type="html"><![CDATA[<p>在linux中80端口是受到保护的，只有root才可以使用(1024以下的端口)。但是出于安全考虑，应用服务器是不应该使用root用户来运行的，一旦server或者应用本身有安全漏洞并加以利用执行攻击脚本，其脚本也会具有root权限，这样危害是巨大的。这里介绍了集中常用的方法来在非root环境下使用80端口：</p>

<ol>
<li>ipchains</li>
<li>iptables</li>
<li>配置jetty的SetUID</li>
<li>xinetd</li>
</ol>


<!--more-->


<h2>ipchains</h2>

<p>在一些较老版本的linux中，可以使用ipchains的REDIRECT机制来将一个端口的数据包转发到另外一个端口上，而且该过程是在内核态中完成的。（如果ipchains不可用，则可以试试iptables）。</p>

<pre><code>/sbin/ipchains -I input --proto TCP --dport 80 -j REDIRECT 8080
</code></pre>

<p>这条命令会告诉操作系统，在有数据包到来时，如果这个数据包是基于tcp协议的，并且目的端口是80端口，那么将该数据包重定向到8080端口。请确保内核在编译的时候是支持ipchians的，比如看看在系统中ipchians命令是否可以使用。</p>

<h2>iptables</h2>

<p>使用iptables的REDIRECT机制来将一个端口的数据包转发到另外一个端口上，而且该过程是在内核态中完成的。现在大部分的linux内核版本都是支持iptables的。</p>

<pre><code>/sbin/iptables -t nat -I PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080
</code></pre>

<p>要想上面的重定向规则起作用，首先要确保发往80端口的包在该规则之前不被拒绝，iptables处理包的流程如下图：</p>

<p><img src="http://shenzhang.github.io/images/2013/07/iptables.gif"></p>

<h2>配置SetUID</h2>

<p>使用linux的setuid特性，让jetty以更高权限来执行。但是由于jetty的配置略微复杂，并且仍然有安全隐患，因此不建议使用。</p>

<h2>xinetd</h2>

<p>在现代linux系统中，xinetd作为inetd的更强大的兄弟可以帮你转发网络请求。因为xinetd仅仅由文本文件来配置，因此非常方便。</p>

<p>有两种方法配置xinetd：</p>

<ol>
<li>在/etc/xinetd.conf中添加一个新的服务</li>
<li>在/etc/xintd.d中添加新的配置文件</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">service</span> <span class="n">my_redirector</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'> <span class="n">type</span> <span class="o">=</span> <span class="n">UNLISTED</span>
</span><span class='line'> <span class="n">disable</span> <span class="o">=</span> <span class="n">no</span>
</span><span class='line'> <span class="n">socket_type</span> <span class="o">=</span> <span class="n">stream</span>
</span><span class='line'> <span class="n">protocol</span> <span class="o">=</span> <span class="n">tcp</span>
</span><span class='line'> <span class="n">user</span> <span class="o">=</span> <span class="n">root</span>
</span><span class='line'> <span class="n">wait</span> <span class="o">=</span> <span class="n">no</span>
</span><span class='line'> <span class="n">port</span> <span class="o">=</span> <span class="mi">80</span>
</span><span class='line'> <span class="n">redirect</span> <span class="o">=</span> <span class="mf">127.0</span><span class="o">.</span><span class="mf">0.1</span> <span class="mi">8888</span>
</span><span class='line'> <span class="n">log_type</span> <span class="o">=</span> <span class="n">FILE</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">somefile</span><span class="o">.</span><span class="na">log</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>等号两边的空格可以省略。type = UNLISTED说明服务的名字没有在/etc/services中列出，但是需要在配置中指明端口和协议。如果你需要使用一个存在服务名称，比如http：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">service</span> <span class="n">http</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'> <span class="n">disable</span> <span class="o">=</span> <span class="n">no</span>
</span><span class='line'> <span class="n">socket_type</span> <span class="o">=</span> <span class="n">stream</span>
</span><span class='line'> <span class="n">user</span> <span class="o">=</span> <span class="n">root</span>
</span><span class='line'> <span class="n">wait</span> <span class="o">=</span> <span class="n">no</span>
</span><span class='line'> <span class="n">redirect</span> <span class="o">=</span> <span class="mf">127.0</span><span class="o">.</span><span class="mf">0.1</span> <span class="mi">8888</span>
</span><span class='line'> <span class="n">log_type</span> <span class="o">=</span> <span class="n">FILE</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">somefile</span><span class="o">.</span><span class="na">log</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以查看/etc/services就更加了解所有已经注册的服务了。</p>

<p>注：</p>

<ol>
<li>日志的主要目的是出于安全性的考虑，因此也可以不配置</li>
<li>RHEL5默认不带有xinetd，因此可以通过yum install xinetd来进行安装</li>
</ol>


<p>xinetd是一个非常强大和高可配置的系统，因此建议好好<a href="http://www.xinetd.org/">阅读</a>下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[配置jetty的表单大小(Form Size)]]></title>
    <link href="http://shenzhang.github.io/blog/2013/07/04/config-form-size-for-jetty/"/>
    <updated>2013-07-04T03:27:00+08:00</updated>
    <id>http://shenzhang.github.io/blog/2013/07/04/config-form-size-for-jetty</id>
    <content type="html"><![CDATA[<p>Jetty对浏览器或者其他客户端post给server的数据大小做了限制，这可以从一定程度上保护jetty免受DOS的攻击。jetty默认允许post的数据大小是200000字节，但是可以针对不同的webapp或者所有app来设置这个参数。</p>

<!--more-->


<h2>改变单个app的最大值</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ContextHandler</span><span class="o">.</span><span class="na">setMaxFormContentSize</span><span class="o">(</span><span class="kt">int</span> <span class="n">maxSize</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者使用xml配置文件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;Configure</span> <span class="na">class=</span><span class="s">&quot;org.eclipse.jetty.webapp.WebAppContext&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- Max Form Size                                                   --&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;maxFormContentSize&quot;</span><span class="nt">&gt;</span>200000<span class="nt">&lt;/Set&gt;</span>
</span><span class='line'><span class="nt">&lt;/Configure&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>改变同一个Server中的所有app</h2>

<p>直接在Server对象上设置org.eclipse.jetty.server.Request.maxFormContentSize属性就可以了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;configure</span> <span class="na">class=</span><span class="s">&quot;org.eclipse.jetty.server.Server&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Call</span> <span class="na">name=</span><span class="s">&quot;setAttribute&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Arg&gt;</span>org.eclipse.jetty.server.Request.maxFormContentSize<span class="nt">&lt;/Arg&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Arg&gt;</span>200000<span class="nt">&lt;/Arg&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/Call&gt;</span>
</span><span class='line'><span class="nt">&lt;/configure&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>改变一个jvm中的所有app(server)</h2>

<p>设置系统属性org.eclipse.jetty.server.Request.maxFormContentSize。</p>

<pre><code>-Dorg.eclipse.jetty.server.Request.maxFormContentSize=200000.
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jetty自定义错误页面]]></title>
    <link href="http://shenzhang.github.io/blog/2013/07/04/customize-error-page-in-jetty/"/>
    <updated>2013-07-04T01:27:00+08:00</updated>
    <id>http://shenzhang.github.io/blog/2013/07/04/customize-error-page-in-jetty</id>
    <content type="html"><![CDATA[<p>以下方法可以用来配置自定义错误页面：</p>

<ol>
<li>在web.xml中定义错误页面</li>
<li>在context文件中定义错误页面</li>
<li>实现自定义的错误处理handler</li>
</ol>


<!--more-->


<h2>在web.xml中定义错误页面</h2>

<p>标准的web应用的配置文件是放在<webapp>/WEB-INF/web.xml中，可以在其中配置&lt;error-page>来映射出错的url。&lt;error-page>可以将错误代码或者是异常类型映射到指定的资源上(错误页面)。其中：</p>

<ul>
<li>error-code:是整数类型</li>
<li>exception-type:Java的异常类型(full name)</li>
<li>location:相对于webapp根目录的页面url，必须要以/开头。</li>
</ul>


<p>如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>[xml]
</span><span class='line'><span class="nt">&lt;error-page&gt;</span>
</span><span class='line'>  <span class="nt">&lt;error-code&gt;</span>404<span class="nt">&lt;/error-code&gt;</span>
</span><span class='line'>  <span class="nt">&lt;location&gt;</span>/jspsnoop/ERROR/404<span class="nt">&lt;/location&gt;</span>
</span><span class='line'><span class="nt">&lt;/error-page&gt;</span>
</span><span class='line'>[/xml]
</span></code></pre></td></tr></table></div></figure>


<p>或：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>[xml]
</span><span class='line'><span class="nt">&lt;error-page&gt;</span>
</span><span class='line'>  <span class="nt">&lt;exception-type&gt;</span>java.io.IOException<span class="nt">&lt;/exception-type&gt;</span>
</span><span class='line'>  <span class="nt">&lt;location&gt;</span>/jspsnoop/IOException<span class="nt">&lt;/location&gt;</span>
</span><span class='line'><span class="nt">&lt;/error-page&gt;</span>
</span><span class='line'>[/xml]
</span></code></pre></td></tr></table></div></figure>


<h2>在context文件中定义错误页面</h2>

<p>context文件通常位于<code>&lt;jetty.home&gt;/contexts/</code>下。context文件可以比web.xml更加灵活的配置错误处理handler，比如可以对error-code指定范围。(但是web.xml更加移植性更好)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;  encoding=&quot;ISO-8859-1&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE Configure PUBLIC &quot;-//Mort Bay Consulting//DTD Configure//EN&quot; &quot;http://jetty.mortbay.org/configure.dtd&quot;&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;Configure</span> <span class="na">class=</span><span class="s">&quot;org.eclipse.jetty.webapp.WebAppContext&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;contextPath&quot;</span><span class="nt">&gt;</span>/test<span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Set</span> <span class="na">name=</span><span class="s">&quot;war&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;SystemProperty</span> <span class="na">name=</span><span class="s">&quot;jetty.home&quot;</span> <span class="na">default=</span><span class="s">&quot;.&quot;</span><span class="nt">/&gt;</span>/webapps/test
</span><span class='line'>  <span class="nt">&lt;/Set&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- by Code --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Get</span> <span class="na">name=</span><span class="s">&quot;errorHandler&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Call</span> <span class="na">name=</span><span class="s">&quot;addErrorPage&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Arg</span> <span class="na">type=</span><span class="s">&quot;int&quot;</span><span class="nt">&gt;</span>404<span class="nt">&lt;/Arg&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Arg</span> <span class="na">type=</span><span class="s">&quot;String&quot;</span><span class="nt">&gt;</span>/jspsnoop/ERROR/404<span class="nt">&lt;/Arg&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/Call&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/Get&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- by Exception --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Get</span> <span class="na">name=</span><span class="s">&quot;errorHandler&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Call</span> <span class="na">name=</span><span class="s">&quot;addErrorPage&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Arg&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Call</span> <span class="na">class=</span><span class="s">&quot;java.lang.Class&quot;</span> <span class="na">name=</span><span class="s">&quot;forName&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;Arg</span> <span class="na">type=</span><span class="s">&quot;String&quot;</span><span class="nt">&gt;</span>java.io.IOException<span class="nt">&lt;/Arg&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/Call&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/Arg&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Arg</span> <span class="na">type=</span><span class="s">&quot;String&quot;</span><span class="nt">&gt;</span>/jspsnoop/IOException<span class="nt">&lt;/Arg&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/Call&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/Get&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- by Code Range --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Get</span> <span class="na">name=</span><span class="s">&quot;errorHandler&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Call</span> <span class="na">name=</span><span class="s">&quot;addErrorPage&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Arg</span> <span class="na">type=</span><span class="s">&quot;int&quot;</span><span class="nt">&gt;</span>500<span class="nt">&lt;/Arg&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Arg</span> <span class="na">type=</span><span class="s">&quot;int&quot;</span><span class="nt">&gt;</span>599<span class="nt">&lt;/Arg&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Arg</span> <span class="na">type=</span><span class="s">&quot;String&quot;</span><span class="nt">&gt;</span>/dump/errorCodeRangeMapping<span class="nt">&lt;/Arg&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/Call&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/Get&gt;</span>
</span><span class='line'><span class="nt">&lt;/Configure&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>自定义错误处理handler</h2>

<p>自定义错误处理器可以从ErrorHandler或者是ErrorPageErrorHandler继承。要想控制输出的错误页面，以下方法需要实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">String</span> <span class="n">target</span><span class="o">,</span> <span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="kt">int</span> <span class="n">dispatch</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">handleErrorPage</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">Writer</span> <span class="n">writer</span><span class="o">,</span> <span class="kt">int</span> <span class="n">code</span><span class="o">,</span> <span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">writeErrorPage</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">Writer</span> <span class="n">writer</span><span class="o">,</span> <span class="kt">int</span> <span class="n">code</span><span class="o">,</span> <span class="n">String</span> <span class="n">message</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">showStacks</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">writeErrorPageHead</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">Writer</span> <span class="n">writer</span><span class="o">,</span> <span class="kt">int</span> <span class="n">code</span><span class="o">,</span> <span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">writeErrorPageBody</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">Writer</span> <span class="n">writer</span><span class="o">,</span> <span class="kt">int</span> <span class="n">code</span><span class="o">,</span> <span class="n">String</span> <span class="n">message</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">showStacks</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">writeErrorPageMessage</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">Writer</span> <span class="n">writer</span><span class="o">,</span> <span class="kt">int</span> <span class="n">code</span><span class="o">,</span> <span class="n">String</span> <span class="n">message</span><span class="o">,</span> <span class="n">String</span> <span class="n">uri</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">writeErrorPageStacks</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">Writer</span> <span class="n">writer</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果是ErrorPageErrorHandler还可以通过调用setShowStacks(false)来禁止堆栈跟踪。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jetty的连接器(Connectors)]]></title>
    <link href="http://shenzhang.github.io/blog/2013/07/03/connectors-in-jetty/"/>
    <updated>2013-07-03T04:27:00+08:00</updated>
    <id>http://shenzhang.github.io/blog/2013/07/03/connectors-in-jetty</id>
    <content type="html"><![CDATA[<p>Jetty提供了几种不同的连接器，你可以根据自己的需要配置不同的连接器。</p>

<h2>连接器的类型</h2>

<ul>
<li>SelectChannelConnector</li>
<li>SocketConnector</li>
<li>SslSelectChannelConnector</li>
<li>SslSocketConnector</li>
<li>Ajp13SocketConnector</li>
</ul>


<!--more-->


<h2>SelectChannelConnector</h2>

<p>使用了NIO技术和非阻塞的线程模型。Jetty使用了Direct NIO buffers，并且仅给每个连接器接收到的请求分配线程。这种连接器非常适用于同时有多个连接，并且每个连接都有一定cpu空闲期，也就是说每个连接不是一直都在进行cpu运算。</p>

<p>当使用Continuations技术时，还支持不占用线程的等待。当一个filter或servlet调用Continuation上的getEvent方法，会产生一个RuntimeException，并且会让当前request停止处理。Jetty捕获这个RuntimeException但是不会向客户端返回响应，而是释放当前线程并将该Continuation放入一个带有超时的队列中。如果一个Continuation超时或者它的resume方法被调用，Jetty会重新分配一个线程来重新处理这个请求。但是唯一的缺陷就是在重新处理该请求时，上次从request取出的内容会不可用，需要重新读取，或者将它们以attribute的形式保存到request里，或者保存到Continuation对象中，以便复用。</p>

<h2>SocketConnector</h2>

<p>采用了传统的阻塞式的IO和线程模型。Jetty使用传统的socket，并且给每一个连接分配一个线程。一般来说不应该使用该连接器，除非NIO不可用。</p>

<h2>SslSelectChannelConnector</h2>

<p>提供SSL协议，并且使用NIO的模型。</p>

<h2>SslSocketConnector</h2>

<p>提供SSL协议，使用阻塞IO模型。</p>

<h2>Ajp13SocketConnector</h2>

<p>实现了Ajp13协议，更多Ajp13协议的信息可以参考<a href="http://tomcat.apache.org/connectors-doc-archive/jk2/common/AJPv13.html">这里</a></p>

<h2>配置选项</h2>

<p>acceptors:用来接收客户端连接的acceptor的线程数。</p>

<p>acceptQueueSize:如果系统无法及时accept，连接请求的最大排队等待数量，超出这个数量操作系统会直接拒绝。</p>

<p>acceptorPriority:用于接收连接请求(accept线程)的线程的优先级。</p>

<p>confidentialPort:</p>

<p>confidentialScheme:默认是https</p>

<p>forwarded:如果是true，那么就会使用hostReader或者其他的手段来检查requet头(header)来从源请求中搜集信息，以便确定ServletRequest.getServerName(),ServletRequest.getServerPort(),ServletRequest.getRemoteAddr()的返回值信息。默认是false。</p>

<p>forwardedHostReader:用于确定被转发的Host头。默认是X-Forwarded-Host。该选项只有在forwared=true时才有效。</p>

<p>forwardedServerHeader:用于确定被转发的Server Name头。默认是X-Forwared-Server.该选项只有在forwared=true时才有效。</p>

<p>forwardedForHeader:</p>

<p>hostHeader:</p>

<p>host:Jetty监听的ip地址，默认是0.0.0.0,会在所有网络接口上监听。</p>

<p>integralPort:</p>

<p>lowResourcesConnections:设置一个数值类型，若当前的连接数超过这个值，那么就将该连接器设置成低资源状态。当前连接数不是一个精确的数字，仅仅是通过NIO的selected set计算出来的平均值。如果进入低资源状态，那么连接器将采用不同的空闲超时时间。</p>

<p>lowResourcesMaxIdleTime:在的资源状态(lowResourcesConnections)下的每个connection可以空闲(idle)的最大时间(单位:ms)。配置这个参数可以让jetty快速的关闭空闲的连接以应对高负载。</p>

<p>maxIdleTime:设置一个连接的空闲时间，它会被直接用于Socket.setSoTimeout(int)，或者在NIO的模型下用于一些技术的超时时间。maxIdleTime会被用于：在一个连接(conntection)上等待一个新的请求时间；从request读取header和body的等待时间；将header或body写入response的等待时间。如果一个字节被读入或者写入，那么超时时间会重置。但是，大多数情况下，读写操作都是交给JVM执行的，因此只能计算单次读写操作的时间（不能精确到一个字节）。另外，jetty支持内存映射文件，因此将一个很大的内容写入一个慢速设备时可能会花费数10秒的时间。</p>

<p>name:连接器的名字。可以使WebAppContext只响应通过WebAppContext.setConntectorNames(String[])所指定的名字的连接器。</p>

<p>port:连接器的监听端口。</p>

<p>requestBufferSize:设置用于接收请求(request)内容(body)的缓冲区。如果当前活跃的连接在接收数据的时候，如果body数据不能装在header缓冲区，那么就会被分配一个requestBuffer。默认是8K。</p>

<p>requestHeaderSize:用于接收请求头的缓冲区大小。空闲的连接最多只会被分配一个这样大小的缓冲期。默认是6K。</p>

<p>responseBufferSize:设置响应(response)内容的缓冲区(buffer)大小。如果当前活跃的连接在发送body数据时，如果body数据不能装在header缓冲区中，那么就会被分配responseBuffer。默认是32K。</p>

<p>responseHeaderSize:设置响应头缓冲(buffer)的大小，默认是6K。</p>

<p>resolveNames:如果是true，那么请求的IP地址将会被被解析成主机名。</p>

<p>reuseAddress:配置jetty的监听socket是否启用SO_REUSEADDR选项。</p>

<p>soLingerTime:配置是否在连接的socket上启用<a href="http://blog.csdn.net/huang_xw/article/details/7338612" target="_blank">SO_LINGER</a>选项，默认不启用。</p>

<p>statsOn:配置是否启用连接的状态搜集。</p>

<p>useDirectBuffers:对于NIO的连接器，配置是否采用Direct Byte Buffer，默认采用(true)。</p>

<p>threadPool:设置一个线程池对象。默认采用的线程池就是设置给org.eclipse.jetty.server.Server的线程池对象，默认是org.eclipse.jetty.util.thread.QueuedThreadPool类型的线程池。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[postgresql中的autovaccum]]></title>
    <link href="http://shenzhang.github.io/blog/2013/07/03/autovaccum-in-postgresql/"/>
    <updated>2013-07-03T02:27:00+08:00</updated>
    <id>http://shenzhang.github.io/blog/2013/07/03/autovaccum-in-postgresql</id>
    <content type="html"><![CDATA[<p>今天一个线上系统出现了一个问题，表现就是和某个数据表A先关的操作变的突然很慢，经过前方的同事排查后发现这个表的数据文件突然变的很大，但是其数据记录只有8000+条，数据文件的大小是正常大小的几十倍导致对该表上的操作效率降低(使用<code>/dt+ table_name</code> 查看数据表大小)。排查监控日志发现有多次调用了全表更新的操作。</p>

<p>问题的原因很简单，由于postgresql对数据记录的存放是多版本的以便实现不同的事务隔离级别，对数据进行更新时并不是对数据文件的对应数据记录进行直接修改，而是不断添加数据记录，每个数据记录都有不同的版本，版本号也是不断累加的。这样就导致数据文件不断膨胀。</p>

<!--more-->


<p>postgresql如何解决这个问题呢。首先postgresql提供的vaccum的功能对数据表和文件进行整理，普通vaccum会扫描数据文件，将不会再用到的记录(当前的所有事务不会再访问到的)打上标记，以便下次在分配版本数据时可以重用这部分空间，以不至于数据文件会不断膨胀。该操作不会对表加锁，但是同样也不会对数据文件做紧凑操作(同jvm的cms垃圾收集)会产生碎片，并且数据文件不会减少。</p>

<p>vaccum加上full参数除了基本的vaccum操作外，还会对数据文件进行紧凑，释放掉过期的版本数据，并且将当前版本的数据记录放在一起，这个时候肯定是反映了真实的数据大小。但是该操作会对表加锁，影响系统访问。一般可以在凌晨定时对数据库做full vaccum操作。</p>

<p>这样看起来是不是觉得postgresql很傻。其实postgresql提供了autovaccum的功能，也就是在运行期使用autovaccum进程自动的对自己做普通vaccum操作(没有full参数)，那么什么时候postgresql会出发vaccum呢？看下postgresql.conf配置文件，其中专门有一节是对autovaccum的参数配置，其中比较重要的以下几个参数：</p>

<pre><code>autovacuum_naptime = 1min #两次autovaccum的间隔
autovacuum_vacuum_threshold = 50 #最小的记录更新数
autovacuum_vacuum_scale_factor = 0.2 #表大小的改动因子
</code></pre>

<p>后面两个参数说明了autovaccum执行的条件，但是实际上并不是说记录被改变了50条就会出发autovaccum。实际上postgresql执行autovaccum的先决条件是autovacuum_naptime时间到了，从默认配置上说就是每隔1分钟会准备执行一次autovaccum，但是具体哪个表会被执行vaccum会参考后面两个参数，如果后面两个参数的阈值没有达到，那么该表就不会被vaccum。</p>

<p>OK，回到之前线上出现的问题，经过我们的分析由于postgresql默认配置的autovaccum间隔是1分钟，那么在这一分钟内如果执行大量的更新操作（删除和插入同理）就会导致数据文件一直膨胀，直到1分钟后autovaccum执行，那么就算执行后文件大小也不会再被减小并紧凑。因此目前一个简单的解决方案就是减小autovacuum_naptime的时间，我们缩小到了2s，目前还没有看到有什么副作用。当然也可以在业务逻辑里根据条件定期主动执行vaccum。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux下搭建subversion]]></title>
    <link href="http://shenzhang.github.io/blog/2013/07/03/subversion-setup-in-linux/"/>
    <updated>2013-07-03T01:27:00+08:00</updated>
    <id>http://shenzhang.github.io/blog/2013/07/03/subversion-setup-in-linux</id>
    <content type="html"><![CDATA[<p>由于有了自己的VPS，索性就搭了一个svn server方便管理下代码，这里记录下配置过程中出现的问题。</p>

<h2>1.安装</h2>

<p>在debian下直接用apt-cache search subversion搜索下，然后apt-get install subversion就可以了。</p>

<h2>2.创建资源库</h2>

<p>在linux中先创建一个用于资源库的目录</p>

<pre><code>mkdir ***/svn
</code></pre>

<p>使用svnadmin创建资源库</p>

<pre><code>svnadmin create ***/svn
</code></pre>

<p>创建完毕后svn目录就具有了svn资源库的布局，比如conf, db, hooks目录等等</p>

<h2>3.启动服务</h2>

<p>subversion可以提供的服务方式有多种，比如：</p>

<ol>
<li>与apache结合使用http协议</li>
<li>使用svnserve提供的独立服务，使用svn协议</li>
<li>直接委托给xinet，当xinet转发的时候需要使用svnserve的-i参数，具体的看下svnserve的帮助</li>
</ol>


<p>我由于没什么特殊要求，就直接使用了svnserve提供的独立服务模式：<code>svnserve -d -r ***/svn</code>启动服务,这样就svnserve就开始监听3690的默认端口</p>

<h2>4.配置用户和权限</h2>

<p>a.修改***/svn/conf/svnserve.conf文件，将auth-access, password-db, authz-db的注释取消掉。具体各选项什么意思，在文件中都有说明。(虽然注释中说明了注释的样子就是svnserve的默认选项，但是发现只有取消了注释才生效的，反正保险点还是显示注明吧)</p>

<p>b.在passwd中添加用户和密码:</p>

<pre><code>[users]
fish = 123
</code></pre>

<p>c.在authz中修改用户权限:</p>

<pre><code>[/]
fish = rw
</code></pre>

<p>说明fish可以访问根目录下的所有文件(读写)</p>

<p>Done.</p>
]]></content>
  </entry>
  
</feed>
